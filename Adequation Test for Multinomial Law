#TEST ADEQUATION pour distribution d'une loi de probabilité pi.
#Je fais un tirage et applique ce test sur mes résultats. Je regarde ma distribution et j'observe comment cette v.a
#converge vers une distribution donnée (ici Chi-deux).

import pylab
import random
import math
import numpy as np
import scipy.stats


#Definition des variables:
X = [1, 2, 3, 4] #X une variable aléatoire appartenant à un ensemble fini de [1;4] 
n = 1000
wX1 = 60 #wX1 le poids (weight) associé au tirage pour X = 1 tq wX1 = probabilité(X = 1) * 100
wX2 = 10
wX3 = 25
wX4 = 5

#Definition de Pi vecteur de probabilités associés aux Xi: 
Pi = [wX1, wX2, wX3, wX4] 
for i in range(len(Pi)):
    Pi[i] = Pi[i]/100
Pi = np.array(Pi)             
print("Pi = ",Pi, type(Pi))


def VariablesAleatoires(n):
    global X
    string = ""
    observation = []
    observationdict = {}
    observation = random.choices(X, weights=(wX1, wX2, wX3, wX4), k=n)
    string += '{}'.format(observation)
    observation.sort() #la fonction sort() permet de trier en ordre croissant (utiliser print(observation) pour voir l'effet)
    #print(observation)
    dict_obs = {x:observation.count(x) for x in observation}
    X, observationfreq = list(dict_obs.keys()), dict_obs.values() #dict_values correspond aux fréquences des valeurs tirées.
    Ni = np.array(list(observationfreq)) #dict_values étant une valeur de dictionnaire, on la transforme une première fois en liste, puis en vecteur pour pouvoir faire des opérations dessus.
    string+="X = {} {} \n".format(X, type(X))
    string+="Ni = {} \n".format(Ni, type(Ni))
    return string, Ni #Ni correspond bien aux fréquences des valeurs tirées sous forme de vecteur.
    
string1, Ni = VariablesAleatoires(n)


def TestAdequation(n, Ni, Pi):
    #Ni our observed frequency
    string = ""
    string += "__ TEST ADEQUATION FUNCTION FOR 1 TEST : __ \n"
    string +="\t Ni in function TestAdequation is {} \n".format(Ni)
    X_critic_5percent = scipy.stats.chi2.ppf(1-.05, df=len(X)-1) #On définit notre Xcritique pour un seuil de 5%
    string +='\t X_critic_5percent is {} \n'.format(X_critic_5percent)
    theo_quantity = Pi*n
    string +='\t theo_quantity = {} {} \n'.format(theo_quantity, type(theo_quantity))
    Z = np.subtract(Ni, theo_quantity)
    string += "\t Z is {} \n".format(Z)
    Z_2 = np.square(Z)
    string +="\t Z2 is {} \n".format(Z_2)
    D = np.divide(Z_2, theo_quantity)
    string +="\t D is {} \n".format(D)
    Dn = sum(D)
    string +='\t Dn is {} \n'.format(Dn)
    if Dn<X_critic_5percent:
        string +="\t H0 is valid"
        return string, 1
    else:
        string +="\t H0 is not valid"
        return string, 0
    
string, Test = TestAdequation(n, Ni, Pi)
print(string )

m = 100

#faire une boucle qui recommence et qui evalue la proportion de H0 valide et non valide. A quelle fréquence H0 est rejeté par le test.

def Proportion_H0_H1(m):
    print()
    print("__ PROPORTION H0/H1 FOR m TRIALS : __")
    ListTest = [0, 0]
    for i in range(m) :
        string1, Ni = VariablesAleatoires(n)
        string, Test = TestAdequation(n, Ni, Pi)
        if Test == 1:
            ListTest[0] += 1
        else :
            ListTest[1] += 1
    print('\t', ListTest)
    print('Ho has a porportion of',ListTest[0], '% and H1 has a proportion of', ListTest[1],'%')

a = Proportion_H0_H1(m)

